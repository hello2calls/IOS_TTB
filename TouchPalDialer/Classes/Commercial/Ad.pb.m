// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Ad.pb.h"
// @@protoc_insertion_point(imports)

@implementation AdRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [AdRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL ad_type_tIsValidValue(ad_type_t value) {
  switch (value) {
    case ad_type_tTxt:
    case ad_type_tImage:
    case ad_type_tFlash:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromad_type_t(ad_type_t value) {
  switch (value) {
    case ad_type_tTxt:
      return @"ad_type_tTxt";
    case ad_type_tImage:
      return @"ad_type_tImage";
    case ad_type_tFlash:
      return @"ad_type_tFlash";
    default:
      return nil;
  }
}

BOOL ad_class_tIsValidValue(ad_class_t value) {
  switch (value) {
    case ad_class_tEmbedded:
    case ad_class_tFloat:
    case ad_class_tPaster:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromad_class_t(ad_class_t value) {
  switch (value) {
    case ad_class_tEmbedded:
      return @"ad_class_tEmbedded";
    case ad_class_tFloat:
      return @"ad_class_tFloat";
    case ad_class_tPaster:
      return @"ad_class_tPaster";
    default:
      return nil;
  }
}

BOOL network_type_tIsValidValue(network_type_t value) {
  switch (value) {
    case network_type_tDefaultNetworkType:
    case network_type_tWifi:
    case network_type_tTwoG:
    case network_type_tThreeG:
    case network_type_tFourG:
    case network_type_tFiveG:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromnetwork_type_t(network_type_t value) {
  switch (value) {
    case network_type_tDefaultNetworkType:
      return @"network_type_tDefaultNetworkType";
    case network_type_tWifi:
      return @"network_type_tWifi";
    case network_type_tTwoG:
      return @"network_type_tTwoG";
    case network_type_tThreeG:
      return @"network_type_tThreeG";
    case network_type_tFourG:
      return @"network_type_tFourG";
    case network_type_tFiveG:
      return @"network_type_tFiveG";
    default:
      return nil;
  }
}

BOOL request_data_type_tIsValidValue(request_data_type_t value) {
  switch (value) {
    case request_data_type_tJson:
    case request_data_type_tHtml:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromrequest_data_type_t(request_data_type_t value) {
  switch (value) {
    case request_data_type_tJson:
      return @"request_data_type_tJson";
    case request_data_type_tHtml:
      return @"request_data_type_tHtml";
    default:
      return nil;
  }
}

BOOL call_type_tIsValidValue(call_type_t value) {
  switch (value) {
    case call_type_tIncoming:
    case call_type_tOutgoing:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromcall_type_t(call_type_t value) {
  switch (value) {
    case call_type_tIncoming:
      return @"call_type_tIncoming";
    case call_type_tOutgoing:
      return @"call_type_tOutgoing";
    default:
      return nil;
  }
}

BOOL dialer_type_tIsValidValue(dialer_type_t value) {
  switch (value) {
    case dialer_type_tDtUnknown:
    case dialer_type_tDtFreeCallDirect:
    case dialer_type_tDtNormalCallDirect:
    case dialer_type_tDtAlwaysAsk:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromdialer_type_t(dialer_type_t value) {
  switch (value) {
    case dialer_type_tDtUnknown:
      return @"dialer_type_tDtUnknown";
    case dialer_type_tDtFreeCallDirect:
      return @"dialer_type_tDtFreeCallDirect";
    case dialer_type_tDtNormalCallDirect:
      return @"dialer_type_tDtNormalCallDirect";
    case dialer_type_tDtAlwaysAsk:
      return @"dialer_type_tDtAlwaysAsk";
    default:
      return nil;
  }
}

@interface udp_request_t ()
@property (strong) NSString* ip;
@property (strong) NSString* ch;
@property (strong) NSString* v;
@property UInt64 prt;
@property ad_type_t at;
@property (strong) NSString* tu;
@property UInt32 adn;
@property ad_class_t adclass;
@property network_type_t nt;
@property request_data_type_t rt;
@property UInt32 w;
@property UInt32 h;
@property (strong) NSString* city;
@property (strong) NSString* addr;
@property Float32 longtitude;
@property Float32 latitude;
@property (strong) NSString* otherPhone;
@property call_type_t callType;
@property (strong) NSString* token;
@property (strong) NSString* tn;
@property BOOL openFreeCall;
@property dialer_type_t dialerType;
@property (strong) NSString* cachedAdid;
@end

@implementation udp_request_t

- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) _value_ {
  hasIp_ = !!_value_;
}
@synthesize ip;
- (BOOL) hasCh {
  return !!hasCh_;
}
- (void) setHasCh:(BOOL) _value_ {
  hasCh_ = !!_value_;
}
@synthesize ch;
- (BOOL) hasV {
  return !!hasV_;
}
- (void) setHasV:(BOOL) _value_ {
  hasV_ = !!_value_;
}
@synthesize v;
- (BOOL) hasPrt {
  return !!hasPrt_;
}
- (void) setHasPrt:(BOOL) _value_ {
  hasPrt_ = !!_value_;
}
@synthesize prt;
- (BOOL) hasAt {
  return !!hasAt_;
}
- (void) setHasAt:(BOOL) _value_ {
  hasAt_ = !!_value_;
}
@synthesize at;
- (BOOL) hasTu {
  return !!hasTu_;
}
- (void) setHasTu:(BOOL) _value_ {
  hasTu_ = !!_value_;
}
@synthesize tu;
- (BOOL) hasAdn {
  return !!hasAdn_;
}
- (void) setHasAdn:(BOOL) _value_ {
  hasAdn_ = !!_value_;
}
@synthesize adn;
- (BOOL) hasAdclass {
  return !!hasAdclass_;
}
- (void) setHasAdclass:(BOOL) _value_ {
  hasAdclass_ = !!_value_;
}
@synthesize adclass;
- (BOOL) hasNt {
  return !!hasNt_;
}
- (void) setHasNt:(BOOL) _value_ {
  hasNt_ = !!_value_;
}
@synthesize nt;
- (BOOL) hasRt {
  return !!hasRt_;
}
- (void) setHasRt:(BOOL) _value_ {
  hasRt_ = !!_value_;
}
@synthesize rt;
- (BOOL) hasW {
  return !!hasW_;
}
- (void) setHasW:(BOOL) _value_ {
  hasW_ = !!_value_;
}
@synthesize w;
- (BOOL) hasH {
  return !!hasH_;
}
- (void) setHasH:(BOOL) _value_ {
  hasH_ = !!_value_;
}
@synthesize h;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) _value_ {
  hasCity_ = !!_value_;
}
@synthesize city;
- (BOOL) hasAddr {
  return !!hasAddr_;
}
- (void) setHasAddr:(BOOL) _value_ {
  hasAddr_ = !!_value_;
}
@synthesize addr;
- (BOOL) hasLongtitude {
  return !!hasLongtitude_;
}
- (void) setHasLongtitude:(BOOL) _value_ {
  hasLongtitude_ = !!_value_;
}
@synthesize longtitude;
- (BOOL) hasLatitude {
  return !!hasLatitude_;
}
- (void) setHasLatitude:(BOOL) _value_ {
  hasLatitude_ = !!_value_;
}
@synthesize latitude;
- (BOOL) hasOtherPhone {
  return !!hasOtherPhone_;
}
- (void) setHasOtherPhone:(BOOL) _value_ {
  hasOtherPhone_ = !!_value_;
}
@synthesize otherPhone;
- (BOOL) hasCallType {
  return !!hasCallType_;
}
- (void) setHasCallType:(BOOL) _value_ {
  hasCallType_ = !!_value_;
}
@synthesize callType;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (BOOL) hasTn {
  return !!hasTn_;
}
- (void) setHasTn:(BOOL) _value_ {
  hasTn_ = !!_value_;
}
@synthesize tn;
- (BOOL) hasOpenFreeCall {
  return !!hasOpenFreeCall_;
}
- (void) setHasOpenFreeCall:(BOOL) _value_ {
  hasOpenFreeCall_ = !!_value_;
}
- (BOOL) openFreeCall {
  return !!openFreeCall_;
}
- (void) setOpenFreeCall:(BOOL) _value_ {
  openFreeCall_ = !!_value_;
}
- (BOOL) hasDialerType {
  return !!hasDialerType_;
}
- (void) setHasDialerType:(BOOL) _value_ {
  hasDialerType_ = !!_value_;
}
@synthesize dialerType;
- (BOOL) hasCachedAdid {
  return !!hasCachedAdid_;
}
- (void) setHasCachedAdid:(BOOL) _value_ {
  hasCachedAdid_ = !!_value_;
}
@synthesize cachedAdid;
- (instancetype) init {
  if ((self = [super init])) {
    self.ip = @"";
    self.ch = @"";
    self.v = @"";
    self.prt = 0L;
    self.at = ad_type_tTxt;
    self.tu = @"";
    self.adn = 0;
    self.adclass = ad_class_tEmbedded;
    self.nt = network_type_tDefaultNetworkType;
    self.rt = request_data_type_tJson;
    self.w = 0;
    self.h = 0;
    self.city = @"";
    self.addr = @"";
    self.longtitude = 0;
    self.latitude = 0;
    self.otherPhone = @"";
    self.callType = call_type_tIncoming;
    self.token = @"";
    self.tn = @"";
    self.openFreeCall = YES;
    self.dialerType = dialer_type_tDtUnknown;
    self.cachedAdid = @"";
  }
  return self;
}
static udp_request_t* defaultudp_request_tInstance = nil;
+ (void) initialize {
  if (self == [udp_request_t class]) {
    defaultudp_request_tInstance = [[udp_request_t alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultudp_request_tInstance;
}
- (instancetype) defaultInstance {
  return defaultudp_request_tInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasIp) {
    [output writeString:1 value:self.ip];
  }
  if (self.hasCh) {
    [output writeString:2 value:self.ch];
  }
  if (self.hasV) {
    [output writeString:3 value:self.v];
  }
  if (self.hasPrt) {
    [output writeUInt64:4 value:self.prt];
  }
  if (self.hasAt) {
    [output writeEnum:5 value:self.at];
  }
  if (self.hasTu) {
    [output writeString:6 value:self.tu];
  }
  if (self.hasAdn) {
    [output writeUInt32:7 value:self.adn];
  }
  if (self.hasAdclass) {
    [output writeEnum:8 value:self.adclass];
  }
  if (self.hasNt) {
    [output writeEnum:9 value:self.nt];
  }
  if (self.hasRt) {
    [output writeEnum:10 value:self.rt];
  }
  if (self.hasW) {
    [output writeUInt32:11 value:self.w];
  }
  if (self.hasH) {
    [output writeUInt32:12 value:self.h];
  }
  if (self.hasCity) {
    [output writeString:13 value:self.city];
  }
  if (self.hasAddr) {
    [output writeString:14 value:self.addr];
  }
  if (self.hasLongtitude) {
    [output writeFloat:15 value:self.longtitude];
  }
  if (self.hasLatitude) {
    [output writeFloat:16 value:self.latitude];
  }
  if (self.hasOtherPhone) {
    [output writeString:17 value:self.otherPhone];
  }
  if (self.hasCallType) {
    [output writeEnum:18 value:self.callType];
  }
  if (self.hasToken) {
    [output writeString:19 value:self.token];
  }
  if (self.hasTn) {
    [output writeString:20 value:self.tn];
  }
  if (self.hasOpenFreeCall) {
    [output writeBool:21 value:self.openFreeCall];
  }
  if (self.hasDialerType) {
    [output writeEnum:22 value:self.dialerType];
  }
  if (self.hasCachedAdid) {
    [output writeString:23 value:self.cachedAdid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasIp) {
    size_ += computeStringSize(1, self.ip);
  }
  if (self.hasCh) {
    size_ += computeStringSize(2, self.ch);
  }
  if (self.hasV) {
    size_ += computeStringSize(3, self.v);
  }
  if (self.hasPrt) {
    size_ += computeUInt64Size(4, self.prt);
  }
  if (self.hasAt) {
    size_ += computeEnumSize(5, self.at);
  }
  if (self.hasTu) {
    size_ += computeStringSize(6, self.tu);
  }
  if (self.hasAdn) {
    size_ += computeUInt32Size(7, self.adn);
  }
  if (self.hasAdclass) {
    size_ += computeEnumSize(8, self.adclass);
  }
  if (self.hasNt) {
    size_ += computeEnumSize(9, self.nt);
  }
  if (self.hasRt) {
    size_ += computeEnumSize(10, self.rt);
  }
  if (self.hasW) {
    size_ += computeUInt32Size(11, self.w);
  }
  if (self.hasH) {
    size_ += computeUInt32Size(12, self.h);
  }
  if (self.hasCity) {
    size_ += computeStringSize(13, self.city);
  }
  if (self.hasAddr) {
    size_ += computeStringSize(14, self.addr);
  }
  if (self.hasLongtitude) {
    size_ += computeFloatSize(15, self.longtitude);
  }
  if (self.hasLatitude) {
    size_ += computeFloatSize(16, self.latitude);
  }
  if (self.hasOtherPhone) {
    size_ += computeStringSize(17, self.otherPhone);
  }
  if (self.hasCallType) {
    size_ += computeEnumSize(18, self.callType);
  }
  if (self.hasToken) {
    size_ += computeStringSize(19, self.token);
  }
  if (self.hasTn) {
    size_ += computeStringSize(20, self.tn);
  }
  if (self.hasOpenFreeCall) {
    size_ += computeBoolSize(21, self.openFreeCall);
  }
  if (self.hasDialerType) {
    size_ += computeEnumSize(22, self.dialerType);
  }
  if (self.hasCachedAdid) {
    size_ += computeStringSize(23, self.cachedAdid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (udp_request_t*) parseFromData:(NSData*) data {
  return (udp_request_t*)[[[udp_request_t builder] mergeFromData:data] build];
}
+ (udp_request_t*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_request_t*)[[[udp_request_t builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (udp_request_t*) parseFromInputStream:(NSInputStream*) input {
  return (udp_request_t*)[[[udp_request_t builder] mergeFromInputStream:input] build];
}
+ (udp_request_t*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_request_t*)[[[udp_request_t builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (udp_request_t*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (udp_request_t*)[[[udp_request_t builder] mergeFromCodedInputStream:input] build];
}
+ (udp_request_t*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_request_t*)[[[udp_request_t builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (udp_request_tBuilder*) builder {
  return [[udp_request_tBuilder alloc] init];
}
+ (udp_request_tBuilder*) builderWithPrototype:(udp_request_t*) prototype {
  return [[udp_request_t builder] mergeFrom:prototype];
}
- (udp_request_tBuilder*) builder {
  return [udp_request_t builder];
}
- (udp_request_tBuilder*) toBuilder {
  return [udp_request_t builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasCh) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ch", self.ch];
  }
  if (self.hasV) {
    [output appendFormat:@"%@%@: %@\n", indent, @"v", self.v];
  }
  if (self.hasPrt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prt", [NSNumber numberWithLongLong:self.prt]];
  }
  if (self.hasAt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"at", NSStringFromad_type_t(self.at)];
  }
  if (self.hasTu) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tu", self.tu];
  }
  if (self.hasAdn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adn", [NSNumber numberWithInteger:self.adn]];
  }
  if (self.hasAdclass) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adclass", NSStringFromad_class_t(self.adclass)];
  }
  if (self.hasNt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nt", NSStringFromnetwork_type_t(self.nt)];
  }
  if (self.hasRt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rt", NSStringFromrequest_data_type_t(self.rt)];
  }
  if (self.hasW) {
    [output appendFormat:@"%@%@: %@\n", indent, @"w", [NSNumber numberWithInteger:self.w]];
  }
  if (self.hasH) {
    [output appendFormat:@"%@%@: %@\n", indent, @"h", [NSNumber numberWithInteger:self.h]];
  }
  if (self.hasCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"city", self.city];
  }
  if (self.hasAddr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addr", self.addr];
  }
  if (self.hasLongtitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"longtitude", [NSNumber numberWithFloat:self.longtitude]];
  }
  if (self.hasLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latitude", [NSNumber numberWithFloat:self.latitude]];
  }
  if (self.hasOtherPhone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"otherPhone", self.otherPhone];
  }
  if (self.hasCallType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"callType", NSStringFromcall_type_t(self.callType)];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  if (self.hasTn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tn", self.tn];
  }
  if (self.hasOpenFreeCall) {
    [output appendFormat:@"%@%@: %@\n", indent, @"openFreeCall", [NSNumber numberWithBool:self.openFreeCall]];
  }
  if (self.hasDialerType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dialerType", NSStringFromdialer_type_t(self.dialerType)];
  }
  if (self.hasCachedAdid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cachedAdid", self.cachedAdid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasIp) {
    [dictionary setObject: self.ip forKey: @"ip"];
  }
  if (self.hasCh) {
    [dictionary setObject: self.ch forKey: @"ch"];
  }
  if (self.hasV) {
    [dictionary setObject: self.v forKey: @"v"];
  }
  if (self.hasPrt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.prt] forKey: @"prt"];
  }
  if (self.hasAt) {
    [dictionary setObject: @(self.at) forKey: @"at"];
  }
  if (self.hasTu) {
    [dictionary setObject: self.tu forKey: @"tu"];
  }
  if (self.hasAdn) {
    [dictionary setObject: [NSNumber numberWithInteger:self.adn] forKey: @"adn"];
  }
  if (self.hasAdclass) {
    [dictionary setObject: @(self.adclass) forKey: @"adclass"];
  }
  if (self.hasNt) {
    [dictionary setObject: @(self.nt) forKey: @"nt"];
  }
  if (self.hasRt) {
    [dictionary setObject: @(self.rt) forKey: @"rt"];
  }
  if (self.hasW) {
    [dictionary setObject: [NSNumber numberWithInteger:self.w] forKey: @"w"];
  }
  if (self.hasH) {
    [dictionary setObject: [NSNumber numberWithInteger:self.h] forKey: @"h"];
  }
  if (self.hasCity) {
    [dictionary setObject: self.city forKey: @"city"];
  }
  if (self.hasAddr) {
    [dictionary setObject: self.addr forKey: @"addr"];
  }
  if (self.hasLongtitude) {
    [dictionary setObject: [NSNumber numberWithFloat:self.longtitude] forKey: @"longtitude"];
  }
  if (self.hasLatitude) {
    [dictionary setObject: [NSNumber numberWithFloat:self.latitude] forKey: @"latitude"];
  }
  if (self.hasOtherPhone) {
    [dictionary setObject: self.otherPhone forKey: @"otherPhone"];
  }
  if (self.hasCallType) {
    [dictionary setObject: @(self.callType) forKey: @"callType"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  if (self.hasTn) {
    [dictionary setObject: self.tn forKey: @"tn"];
  }
  if (self.hasOpenFreeCall) {
    [dictionary setObject: [NSNumber numberWithBool:self.openFreeCall] forKey: @"openFreeCall"];
  }
  if (self.hasDialerType) {
    [dictionary setObject: @(self.dialerType) forKey: @"dialerType"];
  }
  if (self.hasCachedAdid) {
    [dictionary setObject: self.cachedAdid forKey: @"cachedAdid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[udp_request_t class]]) {
    return NO;
  }
  udp_request_t *otherMessage = other;
  return
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasCh == otherMessage.hasCh &&
      (!self.hasCh || [self.ch isEqual:otherMessage.ch]) &&
      self.hasV == otherMessage.hasV &&
      (!self.hasV || [self.v isEqual:otherMessage.v]) &&
      self.hasPrt == otherMessage.hasPrt &&
      (!self.hasPrt || self.prt == otherMessage.prt) &&
      self.hasAt == otherMessage.hasAt &&
      (!self.hasAt || self.at == otherMessage.at) &&
      self.hasTu == otherMessage.hasTu &&
      (!self.hasTu || [self.tu isEqual:otherMessage.tu]) &&
      self.hasAdn == otherMessage.hasAdn &&
      (!self.hasAdn || self.adn == otherMessage.adn) &&
      self.hasAdclass == otherMessage.hasAdclass &&
      (!self.hasAdclass || self.adclass == otherMessage.adclass) &&
      self.hasNt == otherMessage.hasNt &&
      (!self.hasNt || self.nt == otherMessage.nt) &&
      self.hasRt == otherMessage.hasRt &&
      (!self.hasRt || self.rt == otherMessage.rt) &&
      self.hasW == otherMessage.hasW &&
      (!self.hasW || self.w == otherMessage.w) &&
      self.hasH == otherMessage.hasH &&
      (!self.hasH || self.h == otherMessage.h) &&
      self.hasCity == otherMessage.hasCity &&
      (!self.hasCity || [self.city isEqual:otherMessage.city]) &&
      self.hasAddr == otherMessage.hasAddr &&
      (!self.hasAddr || [self.addr isEqual:otherMessage.addr]) &&
      self.hasLongtitude == otherMessage.hasLongtitude &&
      (!self.hasLongtitude || self.longtitude == otherMessage.longtitude) &&
      self.hasLatitude == otherMessage.hasLatitude &&
      (!self.hasLatitude || self.latitude == otherMessage.latitude) &&
      self.hasOtherPhone == otherMessage.hasOtherPhone &&
      (!self.hasOtherPhone || [self.otherPhone isEqual:otherMessage.otherPhone]) &&
      self.hasCallType == otherMessage.hasCallType &&
      (!self.hasCallType || self.callType == otherMessage.callType) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      self.hasTn == otherMessage.hasTn &&
      (!self.hasTn || [self.tn isEqual:otherMessage.tn]) &&
      self.hasOpenFreeCall == otherMessage.hasOpenFreeCall &&
      (!self.hasOpenFreeCall || self.openFreeCall == otherMessage.openFreeCall) &&
      self.hasDialerType == otherMessage.hasDialerType &&
      (!self.hasDialerType || self.dialerType == otherMessage.dialerType) &&
      self.hasCachedAdid == otherMessage.hasCachedAdid &&
      (!self.hasCachedAdid || [self.cachedAdid isEqual:otherMessage.cachedAdid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasCh) {
    hashCode = hashCode * 31 + [self.ch hash];
  }
  if (self.hasV) {
    hashCode = hashCode * 31 + [self.v hash];
  }
  if (self.hasPrt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.prt] hash];
  }
  if (self.hasAt) {
    hashCode = hashCode * 31 + self.at;
  }
  if (self.hasTu) {
    hashCode = hashCode * 31 + [self.tu hash];
  }
  if (self.hasAdn) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.adn] hash];
  }
  if (self.hasAdclass) {
    hashCode = hashCode * 31 + self.adclass;
  }
  if (self.hasNt) {
    hashCode = hashCode * 31 + self.nt;
  }
  if (self.hasRt) {
    hashCode = hashCode * 31 + self.rt;
  }
  if (self.hasW) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.w] hash];
  }
  if (self.hasH) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.h] hash];
  }
  if (self.hasCity) {
    hashCode = hashCode * 31 + [self.city hash];
  }
  if (self.hasAddr) {
    hashCode = hashCode * 31 + [self.addr hash];
  }
  if (self.hasLongtitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.longtitude] hash];
  }
  if (self.hasLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.latitude] hash];
  }
  if (self.hasOtherPhone) {
    hashCode = hashCode * 31 + [self.otherPhone hash];
  }
  if (self.hasCallType) {
    hashCode = hashCode * 31 + self.callType;
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  if (self.hasTn) {
    hashCode = hashCode * 31 + [self.tn hash];
  }
  if (self.hasOpenFreeCall) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.openFreeCall] hash];
  }
  if (self.hasDialerType) {
    hashCode = hashCode * 31 + self.dialerType;
  }
  if (self.hasCachedAdid) {
    hashCode = hashCode * 31 + [self.cachedAdid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface udp_request_tBuilder()
@property (strong) udp_request_t* resultUdpRequestT;
@end

@implementation udp_request_tBuilder
@synthesize resultUdpRequestT;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUdpRequestT = [[udp_request_t alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUdpRequestT;
}
- (udp_request_tBuilder*) clear {
  self.resultUdpRequestT = [[udp_request_t alloc] init];
  return self;
}
- (udp_request_tBuilder*) clone {
  return [udp_request_t builderWithPrototype:resultUdpRequestT];
}
- (udp_request_t*) defaultInstance {
  return [udp_request_t defaultInstance];
}
- (udp_request_t*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (udp_request_t*) buildPartial {
  udp_request_t* returnMe = resultUdpRequestT;
  self.resultUdpRequestT = nil;
  return returnMe;
}
- (udp_request_tBuilder*) mergeFrom:(udp_request_t*) other {
  if (other == [udp_request_t defaultInstance]) {
    return self;
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasCh) {
    [self setCh:other.ch];
  }
  if (other.hasV) {
    [self setV:other.v];
  }
  if (other.hasPrt) {
    [self setPrt:other.prt];
  }
  if (other.hasAt) {
    [self setAt:other.at];
  }
  if (other.hasTu) {
    [self setTu:other.tu];
  }
  if (other.hasAdn) {
    [self setAdn:other.adn];
  }
  if (other.hasAdclass) {
    [self setAdclass:other.adclass];
  }
  if (other.hasNt) {
    [self setNt:other.nt];
  }
  if (other.hasRt) {
    [self setRt:other.rt];
  }
  if (other.hasW) {
    [self setW:other.w];
  }
  if (other.hasH) {
    [self setH:other.h];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasAddr) {
    [self setAddr:other.addr];
  }
  if (other.hasLongtitude) {
    [self setLongtitude:other.longtitude];
  }
  if (other.hasLatitude) {
    [self setLatitude:other.latitude];
  }
  if (other.hasOtherPhone) {
    [self setOtherPhone:other.otherPhone];
  }
  if (other.hasCallType) {
    [self setCallType:other.callType];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasTn) {
    [self setTn:other.tn];
  }
  if (other.hasOpenFreeCall) {
    [self setOpenFreeCall:other.openFreeCall];
  }
  if (other.hasDialerType) {
    [self setDialerType:other.dialerType];
  }
  if (other.hasCachedAdid) {
    [self setCachedAdid:other.cachedAdid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (udp_request_tBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (udp_request_tBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setIp:[input readString]];
        break;
      }
      case 18: {
        [self setCh:[input readString]];
        break;
      }
      case 26: {
        [self setV:[input readString]];
        break;
      }
      case 32: {
        [self setPrt:[input readUInt64]];
        break;
      }
      case 40: {
        ad_type_t value = (ad_type_t)[input readEnum];
        if (ad_type_tIsValidValue(value)) {
          [self setAt:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setTu:[input readString]];
        break;
      }
      case 56: {
        [self setAdn:[input readUInt32]];
        break;
      }
      case 64: {
        ad_class_t value = (ad_class_t)[input readEnum];
        if (ad_class_tIsValidValue(value)) {
          [self setAdclass:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        network_type_t value = (network_type_t)[input readEnum];
        if (network_type_tIsValidValue(value)) {
          [self setNt:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        request_data_type_t value = (request_data_type_t)[input readEnum];
        if (request_data_type_tIsValidValue(value)) {
          [self setRt:value];
        } else {
          [unknownFields mergeVarintField:10 value:value];
        }
        break;
      }
      case 88: {
        [self setW:[input readUInt32]];
        break;
      }
      case 96: {
        [self setH:[input readUInt32]];
        break;
      }
      case 106: {
        [self setCity:[input readString]];
        break;
      }
      case 114: {
        [self setAddr:[input readString]];
        break;
      }
      case 125: {
        [self setLongtitude:[input readFloat]];
        break;
      }
      case 133: {
        [self setLatitude:[input readFloat]];
        break;
      }
      case 138: {
        [self setOtherPhone:[input readString]];
        break;
      }
      case 144: {
        call_type_t value = (call_type_t)[input readEnum];
        if (call_type_tIsValidValue(value)) {
          [self setCallType:value];
        } else {
          [unknownFields mergeVarintField:18 value:value];
        }
        break;
      }
      case 154: {
        [self setToken:[input readString]];
        break;
      }
      case 162: {
        [self setTn:[input readString]];
        break;
      }
      case 168: {
        [self setOpenFreeCall:[input readBool]];
        break;
      }
      case 176: {
        dialer_type_t value = (dialer_type_t)[input readEnum];
        if (dialer_type_tIsValidValue(value)) {
          [self setDialerType:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 186: {
        [self setCachedAdid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasIp {
  return resultUdpRequestT.hasIp;
}
- (NSString*) ip {
  return resultUdpRequestT.ip;
}
- (udp_request_tBuilder*) setIp:(NSString*) value {
  resultUdpRequestT.hasIp = YES;
  resultUdpRequestT.ip = value;
  return self;
}
- (udp_request_tBuilder*) clearIp {
  resultUdpRequestT.hasIp = NO;
  resultUdpRequestT.ip = @"";
  return self;
}
- (BOOL) hasCh {
  return resultUdpRequestT.hasCh;
}
- (NSString*) ch {
  return resultUdpRequestT.ch;
}
- (udp_request_tBuilder*) setCh:(NSString*) value {
  resultUdpRequestT.hasCh = YES;
  resultUdpRequestT.ch = value;
  return self;
}
- (udp_request_tBuilder*) clearCh {
  resultUdpRequestT.hasCh = NO;
  resultUdpRequestT.ch = @"";
  return self;
}
- (BOOL) hasV {
  return resultUdpRequestT.hasV;
}
- (NSString*) v {
  return resultUdpRequestT.v;
}
- (udp_request_tBuilder*) setV:(NSString*) value {
  resultUdpRequestT.hasV = YES;
  resultUdpRequestT.v = value;
  return self;
}
- (udp_request_tBuilder*) clearV {
  resultUdpRequestT.hasV = NO;
  resultUdpRequestT.v = @"";
  return self;
}
- (BOOL) hasPrt {
  return resultUdpRequestT.hasPrt;
}
- (UInt64) prt {
  return resultUdpRequestT.prt;
}
- (udp_request_tBuilder*) setPrt:(UInt64) value {
  resultUdpRequestT.hasPrt = YES;
  resultUdpRequestT.prt = value;
  return self;
}
- (udp_request_tBuilder*) clearPrt {
  resultUdpRequestT.hasPrt = NO;
  resultUdpRequestT.prt = 0L;
  return self;
}
- (BOOL) hasAt {
  return resultUdpRequestT.hasAt;
}
- (ad_type_t) at {
  return resultUdpRequestT.at;
}
- (udp_request_tBuilder*) setAt:(ad_type_t) value {
  resultUdpRequestT.hasAt = YES;
  resultUdpRequestT.at = value;
  return self;
}
- (udp_request_tBuilder*) clearAt {
  resultUdpRequestT.hasAt = NO;
  resultUdpRequestT.at = ad_type_tTxt;
  return self;
}
- (BOOL) hasTu {
  return resultUdpRequestT.hasTu;
}
- (NSString*) tu {
  return resultUdpRequestT.tu;
}
- (udp_request_tBuilder*) setTu:(NSString*) value {
  resultUdpRequestT.hasTu = YES;
  resultUdpRequestT.tu = value;
  return self;
}
- (udp_request_tBuilder*) clearTu {
  resultUdpRequestT.hasTu = NO;
  resultUdpRequestT.tu = @"";
  return self;
}
- (BOOL) hasAdn {
  return resultUdpRequestT.hasAdn;
}
- (UInt32) adn {
  return resultUdpRequestT.adn;
}
- (udp_request_tBuilder*) setAdn:(UInt32) value {
  resultUdpRequestT.hasAdn = YES;
  resultUdpRequestT.adn = value;
  return self;
}
- (udp_request_tBuilder*) clearAdn {
  resultUdpRequestT.hasAdn = NO;
  resultUdpRequestT.adn = 0;
  return self;
}
- (BOOL) hasAdclass {
  return resultUdpRequestT.hasAdclass;
}
- (ad_class_t) adclass {
  return resultUdpRequestT.adclass;
}
- (udp_request_tBuilder*) setAdclass:(ad_class_t) value {
  resultUdpRequestT.hasAdclass = YES;
  resultUdpRequestT.adclass = value;
  return self;
}
- (udp_request_tBuilder*) clearAdclass {
  resultUdpRequestT.hasAdclass = NO;
  resultUdpRequestT.adclass = ad_class_tEmbedded;
  return self;
}
- (BOOL) hasNt {
  return resultUdpRequestT.hasNt;
}
- (network_type_t) nt {
  return resultUdpRequestT.nt;
}
- (udp_request_tBuilder*) setNt:(network_type_t) value {
  resultUdpRequestT.hasNt = YES;
  resultUdpRequestT.nt = value;
  return self;
}
- (udp_request_tBuilder*) clearNt {
  resultUdpRequestT.hasNt = NO;
  resultUdpRequestT.nt = network_type_tDefaultNetworkType;
  return self;
}
- (BOOL) hasRt {
  return resultUdpRequestT.hasRt;
}
- (request_data_type_t) rt {
  return resultUdpRequestT.rt;
}
- (udp_request_tBuilder*) setRt:(request_data_type_t) value {
  resultUdpRequestT.hasRt = YES;
  resultUdpRequestT.rt = value;
  return self;
}
- (udp_request_tBuilder*) clearRt {
  resultUdpRequestT.hasRt = NO;
  resultUdpRequestT.rt = request_data_type_tJson;
  return self;
}
- (BOOL) hasW {
  return resultUdpRequestT.hasW;
}
- (UInt32) w {
  return resultUdpRequestT.w;
}
- (udp_request_tBuilder*) setW:(UInt32) value {
  resultUdpRequestT.hasW = YES;
  resultUdpRequestT.w = value;
  return self;
}
- (udp_request_tBuilder*) clearW {
  resultUdpRequestT.hasW = NO;
  resultUdpRequestT.w = 0;
  return self;
}
- (BOOL) hasH {
  return resultUdpRequestT.hasH;
}
- (UInt32) h {
  return resultUdpRequestT.h;
}
- (udp_request_tBuilder*) setH:(UInt32) value {
  resultUdpRequestT.hasH = YES;
  resultUdpRequestT.h = value;
  return self;
}
- (udp_request_tBuilder*) clearH {
  resultUdpRequestT.hasH = NO;
  resultUdpRequestT.h = 0;
  return self;
}
- (BOOL) hasCity {
  return resultUdpRequestT.hasCity;
}
- (NSString*) city {
  return resultUdpRequestT.city;
}
- (udp_request_tBuilder*) setCity:(NSString*) value {
  resultUdpRequestT.hasCity = YES;
  resultUdpRequestT.city = value;
  return self;
}
- (udp_request_tBuilder*) clearCity {
  resultUdpRequestT.hasCity = NO;
  resultUdpRequestT.city = @"";
  return self;
}
- (BOOL) hasAddr {
  return resultUdpRequestT.hasAddr;
}
- (NSString*) addr {
  return resultUdpRequestT.addr;
}
- (udp_request_tBuilder*) setAddr:(NSString*) value {
  resultUdpRequestT.hasAddr = YES;
  resultUdpRequestT.addr = value;
  return self;
}
- (udp_request_tBuilder*) clearAddr {
  resultUdpRequestT.hasAddr = NO;
  resultUdpRequestT.addr = @"";
  return self;
}
- (BOOL) hasLongtitude {
  return resultUdpRequestT.hasLongtitude;
}
- (Float32) longtitude {
  return resultUdpRequestT.longtitude;
}
- (udp_request_tBuilder*) setLongtitude:(Float32) value {
  resultUdpRequestT.hasLongtitude = YES;
  resultUdpRequestT.longtitude = value;
  return self;
}
- (udp_request_tBuilder*) clearLongtitude {
  resultUdpRequestT.hasLongtitude = NO;
  resultUdpRequestT.longtitude = 0;
  return self;
}
- (BOOL) hasLatitude {
  return resultUdpRequestT.hasLatitude;
}
- (Float32) latitude {
  return resultUdpRequestT.latitude;
}
- (udp_request_tBuilder*) setLatitude:(Float32) value {
  resultUdpRequestT.hasLatitude = YES;
  resultUdpRequestT.latitude = value;
  return self;
}
- (udp_request_tBuilder*) clearLatitude {
  resultUdpRequestT.hasLatitude = NO;
  resultUdpRequestT.latitude = 0;
  return self;
}
- (BOOL) hasOtherPhone {
  return resultUdpRequestT.hasOtherPhone;
}
- (NSString*) otherPhone {
  return resultUdpRequestT.otherPhone;
}
- (udp_request_tBuilder*) setOtherPhone:(NSString*) value {
  resultUdpRequestT.hasOtherPhone = YES;
  resultUdpRequestT.otherPhone = value;
  return self;
}
- (udp_request_tBuilder*) clearOtherPhone {
  resultUdpRequestT.hasOtherPhone = NO;
  resultUdpRequestT.otherPhone = @"";
  return self;
}
- (BOOL) hasCallType {
  return resultUdpRequestT.hasCallType;
}
- (call_type_t) callType {
  return resultUdpRequestT.callType;
}
- (udp_request_tBuilder*) setCallType:(call_type_t) value {
  resultUdpRequestT.hasCallType = YES;
  resultUdpRequestT.callType = value;
  return self;
}
- (udp_request_tBuilder*) clearCallType {
  resultUdpRequestT.hasCallType = NO;
  resultUdpRequestT.callType = call_type_tIncoming;
  return self;
}
- (BOOL) hasToken {
  return resultUdpRequestT.hasToken;
}
- (NSString*) token {
  return resultUdpRequestT.token;
}
- (udp_request_tBuilder*) setToken:(NSString*) value {
  resultUdpRequestT.hasToken = YES;
  resultUdpRequestT.token = value;
  return self;
}
- (udp_request_tBuilder*) clearToken {
  resultUdpRequestT.hasToken = NO;
  resultUdpRequestT.token = @"";
  return self;
}
- (BOOL) hasTn {
  return resultUdpRequestT.hasTn;
}
- (NSString*) tn {
  return resultUdpRequestT.tn;
}
- (udp_request_tBuilder*) setTn:(NSString*) value {
  resultUdpRequestT.hasTn = YES;
  resultUdpRequestT.tn = value;
  return self;
}
- (udp_request_tBuilder*) clearTn {
  resultUdpRequestT.hasTn = NO;
  resultUdpRequestT.tn = @"";
  return self;
}
- (BOOL) hasOpenFreeCall {
  return resultUdpRequestT.hasOpenFreeCall;
}
- (BOOL) openFreeCall {
  return resultUdpRequestT.openFreeCall;
}
- (udp_request_tBuilder*) setOpenFreeCall:(BOOL) value {
  resultUdpRequestT.hasOpenFreeCall = YES;
  resultUdpRequestT.openFreeCall = value;
  return self;
}
- (udp_request_tBuilder*) clearOpenFreeCall {
  resultUdpRequestT.hasOpenFreeCall = NO;
  resultUdpRequestT.openFreeCall = YES;
  return self;
}
- (BOOL) hasDialerType {
  return resultUdpRequestT.hasDialerType;
}
- (dialer_type_t) dialerType {
  return resultUdpRequestT.dialerType;
}
- (udp_request_tBuilder*) setDialerType:(dialer_type_t) value {
  resultUdpRequestT.hasDialerType = YES;
  resultUdpRequestT.dialerType = value;
  return self;
}
- (udp_request_tBuilder*) clearDialerType {
  resultUdpRequestT.hasDialerType = NO;
  resultUdpRequestT.dialerType = dialer_type_tDtUnknown;
  return self;
}
- (BOOL) hasCachedAdid {
  return resultUdpRequestT.hasCachedAdid;
}
- (NSString*) cachedAdid {
  return resultUdpRequestT.cachedAdid;
}
- (udp_request_tBuilder*) setCachedAdid:(NSString*) value {
  resultUdpRequestT.hasCachedAdid = YES;
  resultUdpRequestT.cachedAdid = value;
  return self;
}
- (udp_request_tBuilder*) clearCachedAdid {
  resultUdpRequestT.hasCachedAdid = NO;
  resultUdpRequestT.cachedAdid = @"";
  return self;
}
@end

@interface udp_response_t ()
@property (strong) NSMutableArray * dataArray;
@property UInt32 errorCode;
@end

@implementation udp_response_t

@synthesize dataArray;
@dynamic data;
- (BOOL) hasErrorCode {
  return !!hasErrorCode_;
}
- (void) setHasErrorCode:(BOOL) _value_ {
  hasErrorCode_ = !!_value_;
}
@synthesize errorCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.errorCode = 0;
  }
  return self;
}
static udp_response_t* defaultudp_response_tInstance = nil;
+ (void) initialize {
  if (self == [udp_response_t class]) {
    defaultudp_response_tInstance = [[udp_response_t alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultudp_response_tInstance;
}
- (instancetype) defaultInstance {
  return defaultudp_response_tInstance;
}
- (NSArray *)data {
  return dataArray;
}
- (udp_response_tData*)dataAtIndex:(NSUInteger)index {
  return [dataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.dataArray enumerateObjectsUsingBlock:^(udp_response_tData *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  if (self.hasErrorCode) {
    [output writeUInt32:2 value:self.errorCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.dataArray enumerateObjectsUsingBlock:^(udp_response_tData *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  if (self.hasErrorCode) {
    size_ += computeUInt32Size(2, self.errorCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (udp_response_t*) parseFromData:(NSData*) data {
  return (udp_response_t*)[[[udp_response_t builder] mergeFromData:data] build];
}
+ (udp_response_t*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_response_t*)[[[udp_response_t builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (udp_response_t*) parseFromInputStream:(NSInputStream*) input {
  return (udp_response_t*)[[[udp_response_t builder] mergeFromInputStream:input] build];
}
+ (udp_response_t*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_response_t*)[[[udp_response_t builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (udp_response_t*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (udp_response_t*)[[[udp_response_t builder] mergeFromCodedInputStream:input] build];
}
+ (udp_response_t*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_response_t*)[[[udp_response_t builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (udp_response_tBuilder*) builder {
  return [[udp_response_tBuilder alloc] init];
}
+ (udp_response_tBuilder*) builderWithPrototype:(udp_response_t*) prototype {
  return [[udp_response_t builder] mergeFrom:prototype];
}
- (udp_response_tBuilder*) builder {
  return [udp_response_t builder];
}
- (udp_response_tBuilder*) toBuilder {
  return [udp_response_t builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.dataArray enumerateObjectsUsingBlock:^(udp_response_tData *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"data"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasErrorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errorCode", [NSNumber numberWithInteger:self.errorCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (udp_response_tData* element in self.dataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"data"];
  }
  if (self.hasErrorCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.errorCode] forKey: @"errorCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[udp_response_t class]]) {
    return NO;
  }
  udp_response_t *otherMessage = other;
  return
      [self.dataArray isEqualToArray:otherMessage.dataArray] &&
      self.hasErrorCode == otherMessage.hasErrorCode &&
      (!self.hasErrorCode || self.errorCode == otherMessage.errorCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.dataArray enumerateObjectsUsingBlock:^(udp_response_tData *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasErrorCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.errorCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface udp_response_tData ()
@property (strong) NSString* sid;
@property UInt32 adid;
@property (strong) NSString* brand;
@property (strong) NSString* title;
@property (strong) NSString* desc;
@property (strong) NSString* curl;
@property (strong) NSString* edurl;
@property (strong) NSString* material;
@end

@implementation udp_response_tData

- (BOOL) hasSid {
  return !!hasSid_;
}
- (void) setHasSid:(BOOL) _value_ {
  hasSid_ = !!_value_;
}
@synthesize sid;
- (BOOL) hasAdid {
  return !!hasAdid_;
}
- (void) setHasAdid:(BOOL) _value_ {
  hasAdid_ = !!_value_;
}
@synthesize adid;
- (BOOL) hasBrand {
  return !!hasBrand_;
}
- (void) setHasBrand:(BOOL) _value_ {
  hasBrand_ = !!_value_;
}
@synthesize brand;
- (BOOL) hasTitle {
  return !!hasTitle_;
}
- (void) setHasTitle:(BOOL) _value_ {
  hasTitle_ = !!_value_;
}
@synthesize title;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) _value_ {
  hasDesc_ = !!_value_;
}
@synthesize desc;
- (BOOL) hasCurl {
  return !!hasCurl_;
}
- (void) setHasCurl:(BOOL) _value_ {
  hasCurl_ = !!_value_;
}
@synthesize curl;
- (BOOL) hasEdurl {
  return !!hasEdurl_;
}
- (void) setHasEdurl:(BOOL) _value_ {
  hasEdurl_ = !!_value_;
}
@synthesize edurl;
- (BOOL) hasMaterial {
  return !!hasMaterial_;
}
- (void) setHasMaterial:(BOOL) _value_ {
  hasMaterial_ = !!_value_;
}
@synthesize material;
- (instancetype) init {
  if ((self = [super init])) {
    self.sid = @"";
    self.adid = 0;
    self.brand = @"";
    self.title = @"";
    self.desc = @"";
    self.curl = @"";
    self.edurl = @"";
    self.material = @"";
  }
  return self;
}
static udp_response_tData* defaultudp_response_tDataInstance = nil;
+ (void) initialize {
  if (self == [udp_response_tData class]) {
    defaultudp_response_tDataInstance = [[udp_response_tData alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultudp_response_tDataInstance;
}
- (instancetype) defaultInstance {
  return defaultudp_response_tDataInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSid) {
    [output writeString:1 value:self.sid];
  }
  if (self.hasAdid) {
    [output writeUInt32:2 value:self.adid];
  }
  if (self.hasBrand) {
    [output writeString:3 value:self.brand];
  }
  if (self.hasTitle) {
    [output writeString:4 value:self.title];
  }
  if (self.hasDesc) {
    [output writeString:5 value:self.desc];
  }
  if (self.hasCurl) {
    [output writeString:6 value:self.curl];
  }
  if (self.hasEdurl) {
    [output writeString:7 value:self.edurl];
  }
  if (self.hasMaterial) {
    [output writeString:8 value:self.material];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSid) {
    size_ += computeStringSize(1, self.sid);
  }
  if (self.hasAdid) {
    size_ += computeUInt32Size(2, self.adid);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(3, self.brand);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(4, self.title);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(5, self.desc);
  }
  if (self.hasCurl) {
    size_ += computeStringSize(6, self.curl);
  }
  if (self.hasEdurl) {
    size_ += computeStringSize(7, self.edurl);
  }
  if (self.hasMaterial) {
    size_ += computeStringSize(8, self.material);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (udp_response_tData*) parseFromData:(NSData*) data {
  return (udp_response_tData*)[[[udp_response_tData builder] mergeFromData:data] build];
}
+ (udp_response_tData*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_response_tData*)[[[udp_response_tData builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (udp_response_tData*) parseFromInputStream:(NSInputStream*) input {
  return (udp_response_tData*)[[[udp_response_tData builder] mergeFromInputStream:input] build];
}
+ (udp_response_tData*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_response_tData*)[[[udp_response_tData builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (udp_response_tData*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (udp_response_tData*)[[[udp_response_tData builder] mergeFromCodedInputStream:input] build];
}
+ (udp_response_tData*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (udp_response_tData*)[[[udp_response_tData builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (udp_response_tDataBuilder*) builder {
  return [[udp_response_tDataBuilder alloc] init];
}
+ (udp_response_tDataBuilder*) builderWithPrototype:(udp_response_tData*) prototype {
  return [[udp_response_tData builder] mergeFrom:prototype];
}
- (udp_response_tDataBuilder*) builder {
  return [udp_response_tData builder];
}
- (udp_response_tDataBuilder*) toBuilder {
  return [udp_response_tData builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sid", self.sid];
  }
  if (self.hasAdid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"adid", [NSNumber numberWithInteger:self.adid]];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasCurl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curl", self.curl];
  }
  if (self.hasEdurl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"edurl", self.edurl];
  }
  if (self.hasMaterial) {
    [output appendFormat:@"%@%@: %@\n", indent, @"material", self.material];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSid) {
    [dictionary setObject: self.sid forKey: @"sid"];
  }
  if (self.hasAdid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.adid] forKey: @"adid"];
  }
  if (self.hasBrand) {
    [dictionary setObject: self.brand forKey: @"brand"];
  }
  if (self.hasTitle) {
    [dictionary setObject: self.title forKey: @"title"];
  }
  if (self.hasDesc) {
    [dictionary setObject: self.desc forKey: @"desc"];
  }
  if (self.hasCurl) {
    [dictionary setObject: self.curl forKey: @"curl"];
  }
  if (self.hasEdurl) {
    [dictionary setObject: self.edurl forKey: @"edurl"];
  }
  if (self.hasMaterial) {
    [dictionary setObject: self.material forKey: @"material"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[udp_response_tData class]]) {
    return NO;
  }
  udp_response_tData *otherMessage = other;
  return
      self.hasSid == otherMessage.hasSid &&
      (!self.hasSid || [self.sid isEqual:otherMessage.sid]) &&
      self.hasAdid == otherMessage.hasAdid &&
      (!self.hasAdid || self.adid == otherMessage.adid) &&
      self.hasBrand == otherMessage.hasBrand &&
      (!self.hasBrand || [self.brand isEqual:otherMessage.brand]) &&
      self.hasTitle == otherMessage.hasTitle &&
      (!self.hasTitle || [self.title isEqual:otherMessage.title]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasCurl == otherMessage.hasCurl &&
      (!self.hasCurl || [self.curl isEqual:otherMessage.curl]) &&
      self.hasEdurl == otherMessage.hasEdurl &&
      (!self.hasEdurl || [self.edurl isEqual:otherMessage.edurl]) &&
      self.hasMaterial == otherMessage.hasMaterial &&
      (!self.hasMaterial || [self.material isEqual:otherMessage.material]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSid) {
    hashCode = hashCode * 31 + [self.sid hash];
  }
  if (self.hasAdid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.adid] hash];
  }
  if (self.hasBrand) {
    hashCode = hashCode * 31 + [self.brand hash];
  }
  if (self.hasTitle) {
    hashCode = hashCode * 31 + [self.title hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasCurl) {
    hashCode = hashCode * 31 + [self.curl hash];
  }
  if (self.hasEdurl) {
    hashCode = hashCode * 31 + [self.edurl hash];
  }
  if (self.hasMaterial) {
    hashCode = hashCode * 31 + [self.material hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface udp_response_tDataBuilder()
@property (strong) udp_response_tData* resultData;
@end

@implementation udp_response_tDataBuilder
@synthesize resultData;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultData = [[udp_response_tData alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultData;
}
- (udp_response_tDataBuilder*) clear {
  self.resultData = [[udp_response_tData alloc] init];
  return self;
}
- (udp_response_tDataBuilder*) clone {
  return [udp_response_tData builderWithPrototype:resultData];
}
- (udp_response_tData*) defaultInstance {
  return [udp_response_tData defaultInstance];
}
- (udp_response_tData*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (udp_response_tData*) buildPartial {
  udp_response_tData* returnMe = resultData;
  self.resultData = nil;
  return returnMe;
}
- (udp_response_tDataBuilder*) mergeFrom:(udp_response_tData*) other {
  if (other == [udp_response_tData defaultInstance]) {
    return self;
  }
  if (other.hasSid) {
    [self setSid:other.sid];
  }
  if (other.hasAdid) {
    [self setAdid:other.adid];
  }
  if (other.hasBrand) {
    [self setBrand:other.brand];
  }
  if (other.hasTitle) {
    [self setTitle:other.title];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasCurl) {
    [self setCurl:other.curl];
  }
  if (other.hasEdurl) {
    [self setEdurl:other.edurl];
  }
  if (other.hasMaterial) {
    [self setMaterial:other.material];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (udp_response_tDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (udp_response_tDataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSid:[input readString]];
        break;
      }
      case 16: {
        [self setAdid:[input readUInt32]];
        break;
      }
      case 26: {
        [self setBrand:[input readString]];
        break;
      }
      case 34: {
        [self setTitle:[input readString]];
        break;
      }
      case 42: {
        [self setDesc:[input readString]];
        break;
      }
      case 50: {
        [self setCurl:[input readString]];
        break;
      }
      case 58: {
        [self setEdurl:[input readString]];
        break;
      }
      case 66: {
        [self setMaterial:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSid {
  return resultData.hasSid;
}
- (NSString*) sid {
  return resultData.sid;
}
- (udp_response_tDataBuilder*) setSid:(NSString*) value {
  resultData.hasSid = YES;
  resultData.sid = value;
  return self;
}
- (udp_response_tDataBuilder*) clearSid {
  resultData.hasSid = NO;
  resultData.sid = @"";
  return self;
}
- (BOOL) hasAdid {
  return resultData.hasAdid;
}
- (UInt32) adid {
  return resultData.adid;
}
- (udp_response_tDataBuilder*) setAdid:(UInt32) value {
  resultData.hasAdid = YES;
  resultData.adid = value;
  return self;
}
- (udp_response_tDataBuilder*) clearAdid {
  resultData.hasAdid = NO;
  resultData.adid = 0;
  return self;
}
- (BOOL) hasBrand {
  return resultData.hasBrand;
}
- (NSString*) brand {
  return resultData.brand;
}
- (udp_response_tDataBuilder*) setBrand:(NSString*) value {
  resultData.hasBrand = YES;
  resultData.brand = value;
  return self;
}
- (udp_response_tDataBuilder*) clearBrand {
  resultData.hasBrand = NO;
  resultData.brand = @"";
  return self;
}
- (BOOL) hasTitle {
  return resultData.hasTitle;
}
- (NSString*) title {
  return resultData.title;
}
- (udp_response_tDataBuilder*) setTitle:(NSString*) value {
  resultData.hasTitle = YES;
  resultData.title = value;
  return self;
}
- (udp_response_tDataBuilder*) clearTitle {
  resultData.hasTitle = NO;
  resultData.title = @"";
  return self;
}
- (BOOL) hasDesc {
  return resultData.hasDesc;
}
- (NSString*) desc {
  return resultData.desc;
}
- (udp_response_tDataBuilder*) setDesc:(NSString*) value {
  resultData.hasDesc = YES;
  resultData.desc = value;
  return self;
}
- (udp_response_tDataBuilder*) clearDesc {
  resultData.hasDesc = NO;
  resultData.desc = @"";
  return self;
}
- (BOOL) hasCurl {
  return resultData.hasCurl;
}
- (NSString*) curl {
  return resultData.curl;
}
- (udp_response_tDataBuilder*) setCurl:(NSString*) value {
  resultData.hasCurl = YES;
  resultData.curl = value;
  return self;
}
- (udp_response_tDataBuilder*) clearCurl {
  resultData.hasCurl = NO;
  resultData.curl = @"";
  return self;
}
- (BOOL) hasEdurl {
  return resultData.hasEdurl;
}
- (NSString*) edurl {
  return resultData.edurl;
}
- (udp_response_tDataBuilder*) setEdurl:(NSString*) value {
  resultData.hasEdurl = YES;
  resultData.edurl = value;
  return self;
}
- (udp_response_tDataBuilder*) clearEdurl {
  resultData.hasEdurl = NO;
  resultData.edurl = @"";
  return self;
}
- (BOOL) hasMaterial {
  return resultData.hasMaterial;
}
- (NSString*) material {
  return resultData.material;
}
- (udp_response_tDataBuilder*) setMaterial:(NSString*) value {
  resultData.hasMaterial = YES;
  resultData.material = value;
  return self;
}
- (udp_response_tDataBuilder*) clearMaterial {
  resultData.hasMaterial = NO;
  resultData.material = @"";
  return self;
}
@end

@interface udp_response_tBuilder()
@property (strong) udp_response_t* resultUdpResponseT;
@end

@implementation udp_response_tBuilder
@synthesize resultUdpResponseT;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUdpResponseT = [[udp_response_t alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUdpResponseT;
}
- (udp_response_tBuilder*) clear {
  self.resultUdpResponseT = [[udp_response_t alloc] init];
  return self;
}
- (udp_response_tBuilder*) clone {
  return [udp_response_t builderWithPrototype:resultUdpResponseT];
}
- (udp_response_t*) defaultInstance {
  return [udp_response_t defaultInstance];
}
- (udp_response_t*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (udp_response_t*) buildPartial {
  udp_response_t* returnMe = resultUdpResponseT;
  self.resultUdpResponseT = nil;
  return returnMe;
}
- (udp_response_tBuilder*) mergeFrom:(udp_response_t*) other {
  if (other == [udp_response_t defaultInstance]) {
    return self;
  }
  if (other.dataArray.count > 0) {
    if (resultUdpResponseT.dataArray == nil) {
      resultUdpResponseT.dataArray = [[NSMutableArray alloc] initWithArray:other.dataArray];
    } else {
      [resultUdpResponseT.dataArray addObjectsFromArray:other.dataArray];
    }
  }
  if (other.hasErrorCode) {
    [self setErrorCode:other.errorCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (udp_response_tBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (udp_response_tBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        udp_response_tDataBuilder* subBuilder = [udp_response_tData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addData:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setErrorCode:[input readUInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)data {
  return resultUdpResponseT.dataArray;
}
- (udp_response_tData*)dataAtIndex:(NSUInteger)index {
  return [resultUdpResponseT dataAtIndex:index];
}
- (udp_response_tBuilder *)addData:(udp_response_tData*)value {
  if (resultUdpResponseT.dataArray == nil) {
    resultUdpResponseT.dataArray = [[NSMutableArray alloc]init];
  }
  [resultUdpResponseT.dataArray addObject:value];
  return self;
}
- (udp_response_tBuilder *)setDataArray:(NSArray *)array {
  resultUdpResponseT.dataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (udp_response_tBuilder *)clearData {
  resultUdpResponseT.dataArray = nil;
  return self;
}
- (BOOL) hasErrorCode {
  return resultUdpResponseT.hasErrorCode;
}
- (UInt32) errorCode {
  return resultUdpResponseT.errorCode;
}
- (udp_response_tBuilder*) setErrorCode:(UInt32) value {
  resultUdpResponseT.hasErrorCode = YES;
  resultUdpResponseT.errorCode = value;
  return self;
}
- (udp_response_tBuilder*) clearErrorCode {
  resultUdpResponseT.hasErrorCode = NO;
  resultUdpResponseT.errorCode = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
